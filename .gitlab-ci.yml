include:
  - project: "orderlynetwork/orderly-devops/orderly-common/common-ci"
    ref: main
    file: "/common-orderly-network-dev-v2.yaml"
  - project: "orderlynetwork/orderly-devops/orderly-common/common-ci"
    ref: main
    file: "/common-orderly-network-prod-evm.yaml"

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"
  SERVICE_NAME: storybook
  IMAGE_NAME: storybook
  DOCKER_FILE: ${CI_PROJECT_DIR}/Dockerfile

stages:
  - check_tag
  - build_docker
  - deploy
  - release # add release stage

.internal_publish_template: &internal_publish_template
  stage: release
  image:
    name: asia-northeast1-docker.pkg.dev/woo-orderly/orderly-devops/node:20
  before_script:
    # custom commit message
    - export GIT_COMMIT_MESSAGE="publish internal ${RELEASE_TYPE}"
    - |
      if [ "$RELEASE_TYPE" = "patch" ]; then
        export EXIT_PRE_TAG=false
      else
        export EXIT_PRE_TAG=true
      fi
  script:
    - git checkout "$CI_COMMIT_BRANCH"
    - 'echo "Latest commit message: $CI_COMMIT_MESSAGE"'
    - |
      git config --global --add safe.directory "$CI_PROJECT_DIR"

      export CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH"
      export GIT_TOKEN="$GIT_TOKEN_INTERNAL"
      export GIT_USERNAME="$GIT_USERNAME_INTERNAL"
      export GIT_NAME="$GIT_NAME_INTERNAL"
      export GIT_EMAIL="$GIT_EMAIL_INTERNAL"

      # set internal npm registry and token
      export NPM_REGISTRY="$NPM_REGISTRY_INTERNAL"
      export NPM_TOKEN="$NPM_TOKEN_INTERNAL"

      # set manual trigger to true to skip check branch
      export MANUAL_TRIGGER=true

      # set dex trigger pipeline variables
      export TRIGGER_PIPELINE_PROJECT_ID=$TRIGGER_PIPELINE_PROJECT_ID_DEX
      export TRIGGER_PIPELINE_TOKEN=$TRIGGER_PIPELINE_TOKEN_DEX
      export TRIGGER_PIPELINE_BRANCH=$TRIGGER_PIPELINE_BRANCH_DEX

      npm install -g pnpm@9
      pnpm install --frozen-lockfile
      pnpm release:${RELEASE_TYPE}
  tags:
    - dev
    - build
  rules:
    # Run this job if:
    # 1. Branch name starts with "internal/" AND
    # 2. Commit message does not contain "publish"
    - if: '$CI_COMMIT_BRANCH =~ /^internal\// && $CI_COMMIT_MESSAGE !~ /publish/'
      when: always
    - when: never

# in internal npm, only the patch version needs to be released
internal_patch_publish:
  <<: *internal_publish_template
  variables:
    RELEASE_TYPE: patch

# internal_minor_publish:
#   <<: *internal_publish_template
#   variables:
#     RELEASE_TYPE: minor

# internal_major_publish:
#   <<: *internal_publish_template
#   variables:
#     RELEASE_TYPE: major

.npm_publish_template: &npm_publish_template
  stage: release
  image:
    name: asia-northeast1-docker.pkg.dev/woo-orderly/orderly-devops/node:20
  script:
    - git checkout "$CI_COMMIT_BRANCH"
    - |
      git config --global --add safe.directory "$CI_PROJECT_DIR"

      export CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH"
      export GIT_TOKEN="$GIT_TOKEN_NPM"
      export GIT_USERNAME="$GIT_USERNAME_NPM"
      export GIT_NAME="$GIT_NAME_NPM"
      export GIT_EMAIL="$GIT_EMAIL_NPM"

      # set public npm registry and token
      # export NPM_REGISTRY="$NPM_REGISTRY_NPM"
      export NPM_TOKEN="$NPM_TOKEN_NPM"

      # set internal npm registry and token
      # export NPM_REGISTRY="$NPM_REGISTRY_INTERNAL"
      # export NPM_TOKEN="$NPM_TOKEN_INTERNAL"

      # set manual trigger to true to skip check branch
      export MANUAL_TRIGGER=true

      # custom commit message
      if [ -n "$CUSTOM_PRE_TAG" ]; then
        export GIT_COMMIT_MESSAGE="publish ${CUSTOM_PRE_TAG}"
      else
        export GIT_COMMIT_MESSAGE="publish release"
      fi

      # custom pre tag
      export CUSTOM_PRE_TAG="${CUSTOM_PRE_TAG}"

      # exit pre tag
      export EXIT_PRE_TAG="${EXIT_PRE_TAG}"     

      npm install -g pnpm@9
      pnpm install --frozen-lockfile
      pnpm release:${RELEASE_TYPE}
  tags:
    - dev
    - build

# patch alpha version
npm_patch_alpha:
  <<: *npm_publish_template
  variables:
    RELEASE_TYPE: patch
    CUSTOM_PRE_TAG: alpha
  environment:
    name: npm_patch_alpha
  rules:
    # Run this job if:
    # 1. Branch name is "pre-release"
    # 2. Commit message does not contain "publish"
    - if: '($CI_COMMIT_BRANCH =~ /^pre-release/ || $CI_COMMIT_BRANCH =~ /^npm\//) && $CI_COMMIT_MESSAGE !~ /publish/'
      when: manual
    - when: never

# patch stable version
npm_patch_stable:
  <<: *npm_publish_template
  needs:
    - npm_patch_alpha
  variables:
    RELEASE_TYPE: patch
    EXIT_PRE_TAG: true
  environment:
    name: npm_patch_stable
  rules:
    - if: '($CI_COMMIT_BRANCH =~ /^pre-release/ || $CI_COMMIT_BRANCH =~ /^npm\//) && $CI_COMMIT_MESSAGE !~ /publish/'
      when: manual
    - when: never

# minor alpha version
npm_minor_alpha:
  <<: *npm_publish_template
  variables:
    RELEASE_TYPE: minor
    CUSTOM_PRE_TAG: alpha
  environment:
    name: npm_minor_alpha
  rules:
    - if: '($CI_COMMIT_BRANCH =~ /^pre-release/ || $CI_COMMIT_BRANCH =~ /^npm\//) && $CI_COMMIT_MESSAGE !~ /publish/'
      when: manual
    - when: never

# minor stable version
npm_minor_stable:
  <<: *npm_publish_template
  needs:
    - npm_minor_alpha
  variables:
    RELEASE_TYPE: minor
    EXIT_PRE_TAG: true
  environment:
    name: npm_minor_stable
  rules:
    - if: '($CI_COMMIT_BRANCH =~ /^pre-release/ || $CI_COMMIT_BRANCH =~ /^npm\//) && $CI_COMMIT_MESSAGE !~ /publish/'
      when: manual
    - when: never
# major alpha version
# npm_major_alpha:
#   <<: *npm_publish_template
#   variables:
#     RELEASE_TYPE: major
#     CUSTOM_PRE_TAG: alpha
#   environment:
#     name: npm_major_alpha
#   rules:
#     - if: '($CI_COMMIT_BRANCH =~ /^pre-release/ || $CI_COMMIT_BRANCH =~ /^npm\//) && $CI_COMMIT_MESSAGE !~ /publish/'
#       when: manual
#     - when: never

# # major stable version
# npm_major_stable:
#   <<: *npm_publish_template
#   needs:
#     - npm_major_alpha
#   variables:
#     RELEASE_TYPE: major
#     EXIT_PRE_TAG: true
#   environment:
#     name: npm_major_stable
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "npm-publish" && $CI_COMMIT_MESSAGE !~ /publish/'
#       when: manual
#     - when: never

# Abstract template for triggering external pipelines
.trigger_pipeline_template: &trigger_pipeline_template
  stage: release
  image:
    name: asia-northeast1-docker.pkg.dev/woo-orderly/orderly-devops/node:20
  script:
    - |    
      npm run trigger:pipeline
  rules:
    - if: '($CI_COMMIT_BRANCH =~ /^internal\// || $CI_COMMIT_BRANCH =~ /^pre-release/) && $CI_COMMIT_MESSAGE =~ /publish/'
      when: manual
    - when: never
  tags:
    - dev
    - build

# Trigger dex pipeline
trigger_pipeline_dex:
  <<: *trigger_pipeline_template
  variables:
    TRIGGER_PIPELINE_PROJECT_ID: $TRIGGER_PIPELINE_PROJECT_ID_DEX
    TRIGGER_PIPELINE_TOKEN: $TRIGGER_PIPELINE_TOKEN_DEX
    TRIGGER_PIPELINE_BRANCH: $TRIGGER_PIPELINE_BRANCH_DEX
    GIT_TOKEN: $GIT_TOKEN_INTERNAL
    

# Trigger demo pipeline
trigger_pipeline_demo:
  <<: *trigger_pipeline_template
  variables:
    TRIGGER_PIPELINE_PROJECT_ID: $TRIGGER_PIPELINE_PROJECT_ID_DEMO
    TRIGGER_PIPELINE_TOKEN: $TRIGGER_PIPELINE_TOKEN_DEMO
    TRIGGER_PIPELINE_BRANCH: $TRIGGER_PIPELINE_BRANCH_DEMO
    GIT_TOKEN: $GIT_TOKEN_INTERNAL

# Trigger dmm pipeline
trigger_pipeline_dmm:
  <<: *trigger_pipeline_template
  variables:
    TRIGGER_PIPELINE_PROJECT_ID: $TRIGGER_PIPELINE_PROJECT_ID_DMM
    TRIGGER_PIPELINE_TOKEN: $TRIGGER_PIPELINE_TOKEN_DMM
    TRIGGER_PIPELINE_BRANCH: $TRIGGER_PIPELINE_BRANCH_DMM
    GIT_TOKEN: $GIT_TOKEN_INTERNAL
